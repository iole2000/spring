package corso.ListaPlayer.database;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import corso.ListaPlayer.modelli.Player;
import corso.ListaPlayer.modelli.Team;

public class PlayersDAO {

    private static PlayersDAO instance;

    private PlayersDAO() {
    }

    public static PlayersDAO getInstance() {
        if (instance == null)
            instance = new PlayersDAO();
        return instance;
    }

    private Player mapPlayerFromRecord(Map<String, Object> record) {
        Player player = new Player();
        player.setId((int) record.get("id"));
        player.setNickname((String) record.get("nickname"));
        player.setNome((String) record.get("nome"));
        player.setCognome((String) record.get("cognome"));
        player.setTeam(new Team());
        player.getTeam().setId((int) record.get("id_team"));
        player.getTeam().setNome((String) record.get("nome_team"));
        return player;
    }

    private HashMap<Integer, Player> readAll(String query, String... params) {
        List<Map<String, Object>> listaMappe = Database.eseguiQuery(query, params);
        Player n = null;
        HashMap<Integer, Player> ris = new HashMap<Integer, Player>();
        for (Map<String, Object> record : listaMappe) {
            n = new Player();
            n.setId((int) record.get("id"));
            n.setNickname((String) record.get("nickname"));
            n.setNome((String) record.get("nome"));
            n.setCognome((String) record.get("cognome"));
            n.setTeam(new Team());
            n.getTeam().setId((int) record.get("id_team"));
            n.getTeam().setNome((String) record.get("nome_team"));
            ris.put(n.getId(), n);
        }
        return ris;
    }

    private Set<Map<String, Object>> loadMapsForPlayer(int playerId) {
        // Implementa la logica per caricare le mappe associate al giocatore dal database
        // Utilizza una query per recuperare le mappe associate a playerId
        // Aggiungi le mappe a un Set e restituisci il Set
        // In alternativa, se hai una classe MapDAO, puoi chiamare un metodo per caricare le mappe
        // Esempio di query:
        // "SELECT chiave, valore FROM VARIANTI WHERE id_player = ?"
        // Sostituisci ? con il playerId
        return new HashSet<>(); // Placeholder, sostituisci con la logica reale
    }

    public Set<Map<String, Object>> getMapsForPlayer(Integer playerId) {
        // Implementa la logica per recuperare le mappe associate al giocatore dal database
        // Utilizza una query per recuperare le mappe associate a playerId
        // Restituisci le mappe come un Set
        // In alternativa, se hai una classe MapDAO, puoi chiamare un metodo per ottenere le mappe
        // Esempio di query:
        // "SELECT chiave, valore FROM VARIANTI WHERE id_player = ?"
        // Sostituisci ? con il playerId
        return loadMapsForPlayer(playerId);
    }

    public HashMap<Integer, Player> read() {
        String query = "select P.id, nickname, P.nome, cognome, T.id as id_team, T.nome as nome_team from PLAYERS P left join TEAMS T on P.id_team = T.id";
        return readAll(query);
    }

    public boolean create(HashMap<String, String> parametri) {
        String query = "insert into PLAYERS(nickname, nome, cognome, id_team) values(?,?,?,?)";
        return update(query, parametri.get("nickname"), parametri.get("nome"), parametri.get("cognome"),
                parametri.get("idteam"));
    }

    public boolean update(HashMap<String, String> parametri, Set<Map<String, Object>> nuoveMappe) {
        String query = "update PLAYERS set nickname = ?, nome = ?, cognome = ?, id_team = ? where id = ?";
        boolean success = update(query, parametri.get("nickname"), parametri.get("nome"), parametri.get("cognome"),
                parametri.get("idteam"), parametri.get("id"));

        if (success) {
            Integer playerId = Integer.parseInt(parametri.get("id"));

            if (playerId != null) {
                // Ottieni le mappe correnti associate al giocatore
                Set<Map<String, Object>> mappeCorrenti = getMapsForPlayer(playerId);

                // Aggiungi le nuove mappe alle mappe correnti
                mappeCorrenti.addAll(nuoveMappe);

                // Aggiorna le mappe del giocatore nel database
                success = updateMapsForPlayer(playerId, mappeCorrenti);
            } else {
                // Gestione degli errori o rollback
                success = false;
            }
        }

        return success;
    }

    private boolean update(String query, String... params) {
        return Database.eseguiUpdate(query, params);
    }

    private boolean updateMapsForPlayer(Integer playerId, Set<Map<String, Object>> mappeCorrenti) {
        // Implementa la logica per aggiornare le mappe associate al giocatore nel database
        // Ad esempio, puoi eliminare le mappe correnti e inserire le mappe aggiornate
        // Utilizza una tabella di join o qualsiasi meccanismo che hai implementato per la relazione molti a molti

        // Esempio di pseudo-codice:
        // "DELETE FROM VARIANTI WHERE id_player = ?"
        // Sostituisci ? con il playerId
        // Itera su mappeCorrenti e inseriscile nel database
        // "INSERT INTO VARIANTI (id_player, chiave, valore) VALUES (?, ?, ?)"
        // Sostituisci ? con i valori corrispondenti

        return true; // Restituisci true se tutto Ã¨ andato bene
    }

    public boolean delete(HashMap<String, String> parametri) {
        String query = "delete from PLAYERS where id = ?";
        return update(query, parametri.get("id"));
    }

}
