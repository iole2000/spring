package corso.ListaPlayer.database;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import corso.ListaPlayer.modelli.Player;
import corso.ListaPlayer.modelli.Team;

public class PlayersDAO {
	
	private static PlayersDAO instance;

	private PlayersDAO() {
	}

	public static PlayersDAO getInstance() {
		if(instance == null) 
			instance = new PlayersDAO();
		return instance;
	}
	 private Player mapPlayerFromRecord(Map<String, Object> record) {
	        Player player = new Player();
	        player.setId((int) record.get("id"));
	        player.setNickname((String) record.get("nickname"));
	        player.setNome((String) record.get("nome"));
	        player.setCognome((String) record.get("cognome"));
	        player.setTeam(new Team());
	        player.getTeam().setId((int) record.get("id_team"));
	        player.getTeam().setNome((String) record.get("nome_team"));
	        return player;
	 }
	private HashMap<Integer, Player> readAll(String query, String... params) {
		List<Map<String, Object>> listaMappe = Database.eseguiQuery(query, params);
		Player n = null;
		HashMap<Integer, Player> ris = new HashMap<Integer, Player>();
		for (Map<String, Object> record : listaMappe) {
			n = new Player();
			n.setId((int) record.get("id"));
			n.setNickname((String) record.get("nickname"));
			n.setNome((String) record.get("nome"));
			n.setCognome((String) record.get("cognome"));
			n.setTeam(new Team());
			n.getTeam().setId((int) record.get("id_team"));
			n.getTeam().setNome((String) record.get("nome_team"));
			ris.put(n.getId(), n);
		}
		return ris;
	}

private Set<Map> loadMapsForPlayer(int playerId) {
    // Implementa la logica per caricare le mappe associate al giocatore dal database
    // Utilizza una query per recuperare le mappe associate a playerId
    // Aggiungi le mappe a un Set e restituisci il Set
    // In alternativa, se hai una classe MapDAO, puoi chiamare un metodo per caricare le mappe
    return new HashSet<>(); // Placeholder, sostituisci con la logica reale
}
	private boolean update(String query, String... params) {
		return Database.eseguiUpdate(query, params); 
	}
	
	public HashMap<Integer, Player> read() {
		String query = "select P.id, nickname, P.nome, cognome, T.id as id_team, T.nome as nome_team from PLAYERS P left join TEAMS T on P.id_team = T.id";
		return readAll(query);
	}

	public boolean create(HashMap<String, String> parametri) {
		String query = "insert into PLAYERS(nickname, nome, cognome, id_team) values(?,?,?,?)";
		return update(query, 
				parametri.get("nickname"), 
				parametri.get("nome"), 
				parametri.get("cognome"), 
				parametri.get("idteam"));
	
	 if (success) {
         // Recupera l'ID del giocatore appena creato (puoi farlo in base al nickname o altri criteri)
         Integer playerId = // ... recupera l'ID

         // Aggiungi le mappe associate al giocatore
         Set<Map> maps = // ... recupera le mappe associate
         addMapsToPlayer(playerId, maps);
     }

     return success;
 }

 private void addMapsToPlayer(Integer playerId, Set<Map> maps) {
     // Implementa la logica per associare le mappe al giocatore nel database
     // Utilizza una tabella di join o qualsiasi meccanismo che hai implementato per la relazione molti a molti
 }
	
	public boolean update(HashMap<String, String> parametri) {
		String query = "update PLAYERS set nickname = ?, nome = ?, cognome = ?, id_team = ? where id = ?";
		return update(query, 
				parametri.get("nickname"), 
				parametri.get("nome"), 
				parametri.get("cognome"), 
				parametri.get("idteam"), 
				parametri.get("id"));
	}
	 if (success) {
         // Rimuovi anche le mappe associate al giocatore
         Integer playerId = Integer.parseInt(parametri.get("id"));
         removeMapsForPlayer(playerId);
     }

     return success;
 }
	public boolean delete(HashMap<String, String> parametri) {
		String query = "delete from PLAYERS where id = ?";
		return update(query, parametri.get("id"));
	}

}
